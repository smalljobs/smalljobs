= simple_form_for([:broker, @provider], html: { novalidate: true }) do |f|

  - if notification = f.error_notification
    .alert.alert-danger
      = notification

  .form-actions
    - if @provider.new_record?
      = f.button :submit, "AnbieterIn erstellen", class: 'btn btn-primary btn-success'
    - else
      = f.button :submit, t('common.edit'), class: 'btn btn-primary btn-success'

  %fieldset
    .form-inputs
      = f.input :state, as: :radio_buttons, collection: [{value: :inactive, label: t('activerecord.attributes.provider.inactive_html')}, {value: :active, label: t('activerecord.attributes.provider.active_html')}, {value: :completed, label: t('activerecord.attributes.provider.ended_html')}], label_method: ->(obj){obj[:label]}, value_method: ->(obj){obj[:value]}, label: false, inline_label: '', item_wrapper_class: 'control control--radio'

  %fieldset
    %legend
      = "Anbieterln"
    .form-inputs
      = f.input :company
      = f.input :firstname, required: true
      = f.input :lastname, required: true

  %fieldset
    .form-inputs
      - if !@provider.new_record?
        = f.input :contract, required: true, label: false, inline_label: 'Verträge gesendet'
        %p
          %i.fa.fa-print
          = link_to "Verträge drucken", "/broker/providers/#{@provider.id}/contract?format=pdf", target: '_blank'

      - if @provider.new_record?
        = f.input :password, required: false, autocomplete: 'off'
        = f.input :password_confirmation, required: false
      -#- else
      -#  = f.input :password, required: false, autocomplete: 'off', hint: t('devise_views.leave_empty')
      -#  = f.input :password_confirmation, required: false

  - unless @provider.new_record?
    %fieldset
      .form-inputs
        = f.input :new_note, label: false, as: :text
        %button.btn.btn-success{id: 'comment-btn'}
          = "Kommentieren"
        - Note.where(provider_id: @provider.id).order(:created_at).reverse_order.each do |note|
          %hr
          %div.js-note{'data-note-id': "#{note.id}"}
            %div.row
              %div.col-md-8
                %p
                  %span.bold.margin-right-10
                    = note.broker.name
                  %span.js-note-date
                    = note.updated_at.strftime("%d.%m.%Y, %H:%M")
              %div.col-md-4.text-right
                - if note.broker.id == current_broker.id
                  %span.edit-btn.js-btn-edit
                    = "Bearbeiten"
                  %span.remove-btn{'data-note-id': "#{note.id}"}
                    = "Löschen"
              %div.col-md-12.js-comment
                = note.message
            %hr
            %div.js-edit-field.edit-field
              = text_area_tag :note_edit, note.message ,class: 'text optional form-control'
              = button_tag "Abbrechen", class: "btn btn-success edit-comment-btns js-btn-note-cancel", type: 'button'
              = button_tag "Aktualisieren", class: "btn btn-success edit-comment-btns js-btn-note-update", type: 'button', data: {'update-url': broker_note_provider_update_comment_path(@provider, note)}

        - unless @provider.notes.blank?
          %hr
          %div.row
            %div.col-md-8
              %p
                %span.bold.margin-right-10
                  = "Ältere Notizen"
          %p
            = @provider.notes

  %fieldset
    .form-inputs
      -#= f.input :notes, label: "Notizen (nur intern sichtbar)"
      = f.input :street, required: true
      = f.association :place, required: true, collection: current_broker.places.order(:name, :zip), label_method: :full_name, include_blank: true


  %fieldset
    %legend
      = t('legends.contact')
      %i.fa.fa-2x.fa-phone.pull-right

    .form-inputs
      = f.input :email
      = f.input :phone


      = f.input :mobile
      = f.input :contact_preference, collection: provider_contact_preferences, include_blank: false
      = f.input :contact_availability, hint: ''

  %fieldset
    %legend
      = "Zuständige Organisation"
    .form-inputs
      = f.association :organization, required: true, include_blank: true, label: false, collection: current_broker.all_organizations

  .form-actions
    - if @provider.new_record?
      = f.button :submit, "AnbieterIn erstellen", class: 'btn btn-primary btn-success'
    - else
      = f.button :submit, t('common.edit'), class: 'btn btn-primary btn-success'

  - if !@provider.new_record?
    .form-actions
      %a.btn.btn-success{href: "#", "data-toggle": "modal", "data-target": "#delete_provider_modal"}
        = "Löschen"

    = render 'delete_modal'

- if !@provider.new_record?
  :javascript
    $(document).ready(function() {
      $('#comment-btn').click(function(){
        var comment = $('#provider_new_note').val();
        if(comment === '') {
          return false;
        }

        $.post("#{add_comment_broker_provider_path(@provider)}", {comment: comment}, function(response) {
          window.location.reload();
        });

        return false;
      });

      $('.remove-btn').click(function(){
        var noteId = $(this).attr('data-note-id');

        $.post("#{remove_comment_broker_provider_path(@provider)}", {note_id: noteId}, function(response) {
          window.location.reload();
        })
      });
    });